---
title: "Customer Churn Analysis"
author: "Aheer Srabon"
date: today
format: html
---

```{r}
#| label: setup
#| include: false

 suppressPackageStartupMessages({
  library(dplyr)
  library(purrr)
  library(tibble)
  library(showtext)
  library(tidymodels)
  library(tidyverse)
  library(knitr)
  library(kableExtra)
  library(reshape2)
  library(ggcorrplot)
  library(viridis)
  library(rstatix)
  library(DescTools)
  library(FSelectorRcpp)
})

source("../R/utils.R")
source("../R/theme.R")

font_add("Symbola", "/usr/share/fonts/TTF/Symbola.ttf")
showtext_auto()

library(ggplot2)
theme_set(
  theme_minimal(
    base_size = 16
  ) +
    theme(
      plot.title = element_text(face = "bold"),
      axis.title = element_text(face = "italic")
    )
)

library(ggplot2)

if (knitr::is_html_output()) {
  update_geom_defaults("text", list(size = 12))
  update_geom_defaults("label", list(size = 12))
  theme_update(
    text         = element_text(size = 40),
    plot.title   = element_text(size = 56, face = "bold"),
    axis.title   = element_text(size = 40),
    axis.text    = element_text(size = 40),
    legend.title = element_text(size = 40),
    legend.text  = element_text(size = 40),
    strip.text   = element_text(size = 40)
  )

  knitr::opts_chunk$set(fig.width = 8, fig.height = 5, dpi = 150, dev = "png")
}
```

# Uni-variate & Distributional Analysis

```{r}

df <- read.csv("../data/processed/customer_churn_data_clean.csv")

# Drop index/ID columns; keep the rest from your schema
df_use <- df |>
  select(-X, -CustomerID)  # keep Churn, Age, Tenure, PhoneService, InternetService, Contract, MonthlyCharges, TotalCharges

print_table(
  summarize_df(df_use),
  caption = "Summary of the Dataset",
  name_style = "pretty"
)

df_use |> 
  sample_n(10) |> 
  print_table(
    caption = "Random 10 samples from the dataset",
    name_style = "pretty"
  )
```

## Numeric Distributions (Histograms)

```{r}

num_cols <- df_use |> 
  select(where(is.numeric))

num_long <- num_cols |> 
  pivot_longer(everything(), names_to = "feature", values_to = "value")

ggplot(num_long, aes(value)) +
  geom_histogram(bins = 30, fill = "#4C78A8", alpha = 0.85, color = "white") +
  facet_wrap(~feature, scales = "free", ncol = 2) +
  labs(
    x = NULL, y = "Count"
  )
```

## Categorical Counts (Phone/Internet/Contract)

```{r}

cat_cols <- df_use |>
  select(where(~ is.character(.x) || is.factor(.x))) |>
  select(-Churn)  # analyze service mix separately from the label

cat_long <- cat_cols |>
  mutate(across(everything(), ~ fct_lump_n(factor(.x), n = 8, other_level = "Other"))) |>
  pivot_longer(everything(), names_to = "feature", values_to = "level") |>
  drop_na(level)

ggplot(cat_long, aes(level)) +
  geom_bar(fill = "#72B7B2") +
  facet_wrap(~ feature, scales = "free_y", ncol = 2) +
  coord_flip() +
  labs(x = NULL, y = "Count")
```

## Categorical Proportions by Churn

```{r}
cat_long_churn <- df_use |>
  select(Churn, where(~ is.character(.x) || is.factor(.x))) |>
  mutate(across(-Churn, ~ fct_lump_n(factor(.x), n = 6, other_level = "Other"))) |>
  pivot_longer(-Churn, names_to = "feature", values_to = "level") |>
  drop_na(level, Churn)

ggplot(cat_long_churn, aes(level, fill = Churn)) +
  geom_bar(position = "fill") +
  facet_wrap(~ feature, scales = "free_y", ncol = 2) +
  coord_flip() +
  scale_y_continuous(labels = scales::percent) +
  labs(x = NULL, y = "Percent", fill = "Churn")
```

## Missingness Overview

As can be seen from the following table, there is no missing data.

```{r}
missing_df <- df_use |>
  summarise(across(everything(), ~ sum(is.na(.)))) |>
  pivot_longer(everything(), names_to = "feature", values_to = "n_missing") |>
  mutate(pct = n_missing / nrow(df_use))

ggplot(missing_df, aes(reorder(feature, pct), pct)) +
  geom_col(fill = "#E45756") +
  coord_flip() +
  scale_y_continuous(labels = scales::percent) +
  labs(title = "Missing Values by Feature", x = NULL, y = "Percent Missing")
```

## Skewness

### Quick skew check (numeric)

```{r}
num_long |>
  group_by(feature) |>
  summarise(
    n = sum(!is.na(value)),
    mean = mean(value, na.rm = TRUE),
    median = median(value, na.rm = TRUE),
    sd = sd(value, na.rm = TRUE),
    p99 = quantile(value, 0.99, na.rm = TRUE),
    skew_hint = case_when(
      median < mean ~ "Right-skewed",
      median > mean ~ "Left-skewed",
      TRUE ~ "Roughly symmetric"
    )
  ) |>
  arrange(desc(abs(mean - median))) |> 
  print_table(caption = "Skewness")
```

### Skew check

```{r}
p_age     <- make_skew_plot(df, "Age")
p_tenure  <- make_skew_plot(df, "Tenure")
p_monthly <- make_skew_plot(df, "MonthlyCharges")
p_total   <- make_skew_plot(df, "TotalCharges")

p_age; p_tenure; p_monthly; p_total
```

## Churn vs Non-Churn Proportions

```{r}
# Select the categorical features of interest
cat_features <- c("Gender", "PhoneService", "InternetService", "Contract")

cat_long_churn <- df_use %>%
  select(Churn, all_of(cat_features)) %>%
  pivot_longer(-Churn, names_to = "feature", values_to = "level") %>%
  drop_na(level, Churn)

cat_long_churn |> 
  sample_n(5) |> 
  print_table(
    caption = "Categorical features of interest",
    name_style = "pretty"
  )
```

### Stacked bar (counts by category)

```{r}
ggplot(cat_long_churn, aes(level, fill = Churn)) +
  geom_bar(position = "stack") +
  facet_wrap(~ feature, scales = "free_x", ncol = 2) +
  labs(
    title = "Categorical Balances by Churn (Counts)",
    x = NULL, y = "Count", fill = "Churn"
  ) +
  theme(axis.text.x = element_text(size = 8, angle = 20, hjust = 0.5))
```

### Normalized bar (proportions within each category)

```{r}
ggplot(cat_long_churn, aes(level, fill = Churn)) +
  geom_bar(position = "fill") +
  facet_wrap(~ feature, scales = "free_x", ncol = 2) +
  scale_y_continuous(labels = scales::percent) +
  labs(
    title = "Categorical Balances by Churn (Proportions)",
    x = NULL, y = "Percent", fill = "Churn"
  ) +
  theme(axis.text.x = element_text(angle = 20, hjust = 0.5, size = 8))
```

# Bivariate (Churn vs. Features)

```{r}
#| label: helpers

# Ensure types
df_use <- df_use %>%
  mutate(
    Churn = factor(Churn, levels = c("No","Yes")),
    Contract = factor(Contract),
    InternetService = factor(InternetService)
  )

# Generic helper: churn rate + 95% CI by categorical feature
# Because churn rate is an estimate from data, we add 95%
# confidence interval using the Wilson method. 
churn_rate_by <- function(data, feature) {
  f <- enquo(feature)
  data %>%
    group_by(!!f) %>%
    summarise(
      churn_yes = sum(Churn == "Yes", na.rm = TRUE),
      n = n(),
      .groups = "drop"
    ) %>%
    mutate(ci = map2(churn_yes, n, prop_ci_wilson)) %>%
    tidyr::unnest_wider(ci) %>%
    rename(level = !!f)
}

# Small effect-size helpers
cramer_v <- function(tab) {
  chi2 <- suppressWarnings(chisq.test(tab)$statistic)
  n <- sum(tab); k <- min(nrow(tab), ncol(tab))
  as.numeric(sqrt(chi2 / (n * (k - 1))))
}
cohens_d <- function(x, y) {
  m1 <- mean(x, na.rm=TRUE); m2 <- mean(y, na.rm=TRUE)
  s1 <- sd(x, na.rm=TRUE);  s2 <- sd(y, na.rm=TRUE)
  n1 <- sum(!is.na(x));     n2 <- sum(!is.na(y))
  s_p <- sqrt(((n1-1)*s1^2 + (n2-1)*s2^2) / (n1 + n2 - 2))
  (m2 - m1) / s_p
}
```

## Churn rate by `Tenure` bins (0-6, 6-12, 12-24, 24-48, 48+)

`Tenure` is how long a customer has been with the company (in months). Following is the hypothesis,

::: {style="text-align: center; width: 50%"}
Customer who are **new** (short tenure) are more likely to churn; customers who have stayed longer are "stickier"
:::

To test this,

1.  Group customers into **bins** of tenure (0-6 months, 6-12, etc.).
2.  Compute **churn rate** = (# churned customers) / (total customers) in each bin.
3.  Plot churn rate across bins to visualize patterns.

If churn is very high in 0-6 months bin, that means the company has an **onboarding / early experience** problem.

```{r}
# convert Tenure into a categorical `bin` variable
df_tenure <- df_use %>%
  mutate(
    tenure_bin = cut(
      Tenure,
      breaks = c(0, 6, 12, 24, 48, Inf),
      labels = c("0–6", "6–12", "12–24", "24–48", "48+"),
      right = TRUE,
      include.lowest = TRUE
    )
  )

# now each customer is tagged with a tenure_bin value (e.g., "0-6")
df_tenure |> 
  select(Gender, Age, Contract, tenure_bin) |> 
  sample_n(5) |> 
  print_table(
    caption = "Data Frame with Tenure Bin tags",
    name_style = "pretty"
  )
```

-   `n` = number of customers

-   `churn_yes` = number of churned customers

-   `p` = `churn_yes` / `n` = churn proportion

```{r}
# pass df_tenure into churn_rate_by
tenure_stats <- churn_rate_by(df_tenure, tenure_bin)

tenure_stats |> 
  print_table(caption = "Tenure statistics", name_style = "none")
```

Because churn rate is an estimate from data, we add 95% confidence interval using the Wilson method.

```{r}
# plot
ggplot(tenure_stats, aes(x = level, y = p)) +
  geom_col(fill = "#4C78A8", alpha = 0.9) +
  geom_errorbar(aes(ymin = p_lo, ymax = p_hi), width = 0.15) +
  # Add churn % labels above bars
  geom_text(
    aes(label = scales::percent(p, accuracy = 1)),
    vjust = -1,               # position slightly above bar
    hjust = 1.25,
    size = 4,
  ) +
  scale_y_continuous(labels = scales::percent,
                     expand = expansion(mult = c(0, 0.1))) +
  labs(
    title = "Churn Rate by Tenure Bin (95% CI)",
    x = "Tenure (months)", y = "Churn rate"
  ) 
```

## Contract Type vs. Churn

Goal: Show how churn differs by contract type. Hypothesis: Month-to-month has higher churn than One/Two year contracts.

```{r}
df_use |> 
  group_by(Contract, Churn) |> 
  summarise(n = n(), .groups = "drop") |> 
  group_by(Contract) |> 
  mutate(prop = n / sum(n)) |> 
  ggplot(aes(x = Contract, y = prop, fill = Churn)) +
  geom_col(position = "dodge") +
  geom_text(aes(label = scales::percent(prop, accuracy = 0.1)),
            position = position_dodge(width = 0.9), vjust = -0.25, size = 3) +
  scale_y_continuous(labels = scales::percent) +
  labs(title = "Churn Proportion by Contract Type",
       x = "Contract Type", y = "Proportion")
```

## Internet Service vs. Churn

Goal: Compare churn across DSL / Fiber optic / No Internet.

```{r}
df_use |> 
  group_by(InternetService, Churn) |> 
  summarise(n = n(), .groups = "drop") |> 
  group_by(InternetService) |> 
  mutate(prop = n / sum(n)) |> 
  ggplot(aes(x = InternetService, y = prop, fill = Churn)) +
  geom_col(position = "dodge") +
  geom_text(aes(label = scales::percent(prop, accuracy = 0.1)),
            position = position_dodge(width = 0.9), vjust = -0.25, size = 3) +
  scale_y_continuous(labels = scales::percent) +
  labs(title = "Churn Proportion by Internet Service",
       x = "Internet Service", y = "Proportion")
```

## Numeric Densities by Churn

```{r}
num_long_churn <- df_use |> 
  select(Churn, where(is.numeric)) |> 
  pivot_longer(-Churn, names_to = "feature", values_to = "value") |> 
  drop_na(value)

ggplot(num_long_churn, aes(value, fill = Churn)) +
  geom_density(alpha = 0.35) +
  facet_wrap(~feature, scale = "free", ncol = 2) +
  labs(
    x = NULL,
    y = "Density",
    fill = "Churn"
  )
```

## Numeric Box Plots by Churn

```{r}
ggplot(num_long_churn, aes(x = Churn, y = value, fill = Churn)) +
  geom_boxplot(outlier.alpha = 0.25, width = 0.7) +
  facet_wrap(~ feature, scales = "free_y", ncol = 2) +
  labs(x = NULL, y = NULL) +
  guides(fill = "none")

```

## Numeric Violin Plots by Churn

```{r}
ggplot(num_long_churn, aes(x = Churn, y = value, fill = Churn)) +
  geom_violin(outlier.alpha = 0.25, width = 0.7) +
  facet_wrap(~ feature, scales = "free_y", ncol = 2) +
  labs(x = NULL, y = NULL) +
  guides(fill = "none")
```

# Multivariate Relationships

## Age x Tenure x Churn

```{r}
 df_use_3 <- df_use |> 
  mutate(
    AgeGroup = cut(
      Age,
      breaks = c(18, 30, 50, 80),
      labels = c("<30", "30-50", "50+")
    )
  )

df_use_3 |> 
  sample_n(5) |> 
  print_table(caption = "Data for `Tenure Distribution by Age Group and Churn'")

```

Following plot shows distributions of Tenure across age groups and split by Churn,

```{r}
df_use_3 |> 
  ggplot(aes(x = Tenure, fill = Churn)) +
  geom_density(alpha = 0.5) +
  facet_wrap(~ AgeGroup) +
  labs(title = "Tenure Distribution by Age Group and Churn")
```

For extra clarity, following is a Heatmap,

```{r}
# Dynamic breaks that cover full data
age_breaks <- seq(floor(min(df$Age)), ceiling(max(df$Age)), by = 10)
tenure_breaks <- c(0, 6, 12, 24, 48, 72, Inf)  # Inf ensures top values included

heatmap_data <- df %>%
  mutate(
    AgeBin = cut(Age, breaks = age_breaks, include.lowest = TRUE, right = FALSE),
    TenureBin = cut(Tenure, breaks = tenure_breaks, include.lowest = TRUE, right = FALSE)
  ) %>%
  group_by(AgeBin, TenureBin) %>%
  summarize(ChurnRate = mean(Churn == "Yes"), .groups = "drop")

heatmap_data |> 
  sample_n(5) |> 
  print_table()


heatmap_data |> 
  ggplot(aes(x = TenureBin, y = AgeBin, fill = ChurnRate)) +
  geom_tile(color = "white") +
  scale_fill_gradient(low = "white", high = "red") +
  labs(title = "Churn Rate Heattmap by Age x Tenure", fill = "Churn Rate")
```

## MonthlyCharges x Contract x Churn

```{r}
ggplot(df_use, aes(x = Contract, y = MonthlyCharges, fill = Churn)) +
  geom_boxplot() +
  labs(title = "Monthly Charges by Contract and Churn")
```

## InternetService x Contract (churn risk heatmap)

```{r}
heat_data <- df_use |> 
  group_by(InternetService, Contract) |> 
  summarize(churn_rate = mean(Churn == "Yes")) |> 
  ungroup()

heat_data |> 
  ggplot(aes(x = Contract, y = InternetService, fill = churn_rate)) +
  geom_tile() +
  scale_fill_gradient(low = "white", high = "red") +
  labs(title = "Churn Risk by Internet Service and Contract", fill = "Churn Rate")
```

# Feature Engineering for EDA

## Customer lifetime value proxy

```{r}
df_use_1 <- df_use |> 
  mutate(CLTV = MonthlyCharges * Tenure)

df_use_1 |> 
  sample_n(5) |> 
  print_table()

df_use_1 |> 
  ggplot(aes(x = Churn, y = CLTV, fill = Churn)) +
  geom_violin() +
  labs(title = "Customer Lifetime Value (CLTV) vs Churn")
```

## At-risk cohorts (cohort flagging)

Create a derived feature for risk segments,

```{r}
df_use_2 <- df_use |> 
  mutate(RiskCohort = case_when(
    Contract == "Month-to-month" & Tenure < 12 & MonthlyCharges > 70 ~ "High Risk",
    T ~ "Low/Mediium Risk"
  ))

df_use_2 |> 
  ggplot(aes(x = RiskCohort, fill = Churn)) +
  geom_bar(position = "fill") +
  scale_y_continuous(labels = scales::percent)
```

# Correlation & Association

## Numeric-only correlation matrix

```{r}
num_vars <- c("Age","Tenure","MonthlyCharges","TotalCharges")

df_num <- df_use |> 
  select(all_of(num_vars)) |> 
  mutate(across(everything(), as.numeric))

cor_mat  <- cor(df_num, use = "pairwise.complete.obs", method = "pearson")

ggcorrplot(cor_mat,
           hc.order = TRUE,
           type = "lower",
           lab = TRUE,
           lab_size = 3,
           colors = c("#d8b365", "white", "#5ab4ac"),  # muted earthy tones
           outline.color = "gray50")
```

## Chi-square + Cramer’s V for categorical vs. Churn

```{r}
# Pick categorical predictors you care about:
cat_vars <- c("Gender","PhoneService","InternetService","Contract") # add more as needed

chi_cramer_tbl <- map_dfr(cat_vars, function(v) {
  tbl <- table(df[[v]], df$Churn)
  suppressWarnings({
    chi <- chisq.test(tbl)
  })
  tibble(
    variable   = v,
    chisq_stat = unname(chi$statistic),
    df         = unname(chi$parameter),
    p_value    = chi$p.value,
    cramers_v  = CramerV(tbl, bias.correct = TRUE)
  )
}) |> 
  arrange(p_value)

print_table(chi_cramer_tbl, caption = "Cramér’s V - Effect size measure")
```

Which shows that, to predict churn, Contract is a strong (because of low p_value) predictor. Next up are, Gender, PhoneService, and InternetService.

## Mutual information (any type $\rightarrow$ Churn)

Mutual Information is a great way to rank all features (numeric + categorical) together by how much they help explain churn. It complements correlation, Chi-square, and Cramér’s V by giving a unified importance measure.

```{r}
# Compute MI for all features (drop ID-like columns if present)
features_for_mi <- setdiff(names(df), c("Churn","customerID","CustomerID","id","ID"))

mi_tbl <- information_gain(
  formula = reformulate(termlabels = features_for_mi, response = "Churn"),
  data    = df |> mutate(across(all_of(features_for_mi), ~ .x)) # pass-through
) |> arrange(desc(importance))

mi_tbl |> 
  head(4) |> 
  print_table("Importance of variables", digits = 6)
```

```{r}
mi_tbl %>%
  slice_max(order_by = importance, n = 15) %>%
  ggplot(aes(x = reorder(attributes, importance), y = importance)) +
  geom_col(fill = "steelblue") +
  coord_flip() +
  labs(
    x = "Feature",
    y = "Information Gain (MI)"
  )
```

# Survival-style Analysis

```{r}
library(survival)
library(survminer)

# Create survival object
surv_obj <- Surv(time = df_use$Tenure, event = df_use$Churn == "Yes")

# Kaplan–Meier by contract type
fit <- survfit(surv_obj ~ Contract, data = df_use)

# Plot
p <- ggsurvplot(
  fit, 
  data = df_use, 
  risk.table = TRUE, 
  pval = TRUE,
  pval.size = if(knitr::is_html_output()) 10 else 5,
  xlab = "Tenure (months)",
  ylab = "Survival Probability (not churned)",
  legend.title = "Contract Type",
  
  # give the table breathing room
  risk.table.height = 0.3,       # try 0.24–0.32
  risk.table.y.text = TRUE,       # show group labels on the left
  risk.table.y.text.col = TRUE,   # color labels by strata
  break.time.by = 6,              # fewer columns reduces crowding
  
  ggtheme = theme_minimal()
)

p$plot;p$table
```
